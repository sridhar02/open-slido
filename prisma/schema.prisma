// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    slidos        Slido[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Slido {
    id String @id @default(cuid())

    title    String
    joinCode String @unique
    type     Type   @default(PUBLIC)

    startDate DateTime
    endDate   DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    User   User?   @relation(fields: [userId], references: [id])
    userId String?

    polls Poll[]
}

enum Type {
    PUBLIC
    PRIVATE
}

model Poll {
    id        String     @id @default(cuid())
    title     String
    Question  Question[]
    createdAt DateTime   @default(now()) @map("created_at")
    updatedAt DateTime?  @updatedAt @map("updated_at")

    Slido   Slido?  @relation(fields: [slidoId], references: [id])
    slidoId String?

    participants Participant[]
}

model Participant {
    id        String    @id @default(cuid())
    name      String
    email     String?
    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime? @updatedAt @map("updated_at")

    Poll   Poll?   @relation(fields: [pollId], references: [id])
    pollId String?
}

model Question {
    id      Int      @id @default(autoincrement())
    text    String
    answers Answer[]

    Poll   Poll?   @relation(fields: [pollId], references: [id])
    pollId String?
}

model Answer {
    id         Int      @id @default(autoincrement())
    text       String
    isCorrect  Boolean  @default(false)
    questionId Int
    question   Question @relation(fields: [questionId], references: [id])
}
